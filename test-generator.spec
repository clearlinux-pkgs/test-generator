#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : test-generator
Version  : 0.1.2
Release  : 7
URL      : https://files.pythonhosted.org/packages/1e/b3/90a71f2f4f9de5467c5518f0d75876eb7501c07fa1e25353ceaa56da3973/test-generator-0.1.2.tar.gz
Source0  : https://files.pythonhosted.org/packages/1e/b3/90a71f2f4f9de5467c5518f0d75876eb7501c07fa1e25353ceaa56da3973/test-generator-0.1.2.tar.gz
Summary  : Generator is a helper for generating test methods for nose while still using unittest
Group    : Development/Tools
License  : HPND ISC
Requires: test-generator-license = %{version}-%{release}
Requires: test-generator-python = %{version}-%{release}
Requires: test-generator-python3 = %{version}-%{release}
Requires: six
BuildRequires : buildreq-distutils3
BuildRequires : nose
BuildRequires : python-mock
BuildRequires : python-mock-python
BuildRequires : six
BuildRequires : six-python

%description
===============================
Generator
===============================

.. image:: https://img.shields.io/travis/kevinastone/generator.svg
        :target: https://travis-ci.org/kevinastone/generator

.. image:: https://img.shields.io/pypi/v/generator.svg
        :target: https://pypi.python.org/pypi/generator


Generator is a helper for generating test methods for nose while still using unittest.

* Free software: ISC license
* Documentation: https://generator.readthedocs.org.


Installation
------------

::

    pip install test-generator


Introduction
------------

Have you ever written tests that loop through a list of inputs to validate the functionality?

Something like?

.. code-block:: python

    from mything import thingy

    class MyTestCase(unittest.TestCase):
        def test_thingy(self):
            for input in [
                'a',
                'b',
                'cccc',
                'ddd'
                'eeeeee',
                'f',
                'g'
            ]:
                self.assertTrue(thingy(input))


But running in a loop limits all the functionality in ``TestCase`` like per-
test setUp or tearDown.  It also fails on the first input and you can't run a
single test input, you have to run them all?  (Doesn't work well when each
test is more complicated than this toy case).

Instead, what if you wrote your test like:

.. code-block:: python

    from generator import generator, generate
    from mything import thingy

    @generator
    class MyTestCase(unittest.TestCase):

        @generate('a', 'b', 'cccc', 'ddd', 'eeeeee', 'f', 'g')
        def test_thingy(self, input):
            self.assertTrue(thingy(input))


And when you run your tests, you see:

.. code-block:: shell

    ----------------------------------------------------------------------
    Ran 7 tests in 0.001s

    OK

Generator gives you simple decorators to mulitply your test methods based on
an argument list.  It's great for checking a range of inputs, a list of error
conditions or expected status codes.


Examples
--------

API Client Error Handling
^^^^^^^^^^^^^^^^^^^^^^^^^

Let's make sure our API client properly handles error conditions and raises a
generic APIError under the conditions.  We'll use mock to patch out the actual
API call to return our response.

.. code-block:: python

    import mock
    from generator import generator, generate
    from example import client, APIError

    @generator
    class TestAPIErrorHandling(unittest.TestCase):

        @generate(400, 401, 403, 404, 500, 502, 503)
        def test_error(self, status_code):
            with mock.patch(client, '_request') as _request_stub:
                _request_stub.return_value.status_code = status_code

                self.assertRaises(APIError):
                    client.get('/path/')


Test Fixtures
^^^^^^^^^^^^^

Let's make sure our API client properly handles error conditions and raises a
generic APIError under the conditions.  We'll use mock to patch out the actual
API call to return our response.

.. code-block:: python

    from generator import generator, generate
    from example.sanitize import strip_tags

    @generator
    class TestStripTags(unittest.TestCase):

        @generate(
            ('<h1>hi</h1>', 'hi'),
            ('<script></script>something', 'something'),
            ('<div class="important"><p>some text</p></div>', 'some text'),
        )
        def test_strip_tags(self, input, expected):
            self.assertEqual(strip_tags(input), expected)




History
-------

0.1.1 (2015-10-15)
---------------------

* First release on PyPI.

%package license
Summary: license components for the test-generator package.
Group: Default

%description license
license components for the test-generator package.


%package python
Summary: python components for the test-generator package.
Group: Default
Requires: test-generator-python3 = %{version}-%{release}

%description python
python components for the test-generator package.


%package python3
Summary: python3 components for the test-generator package.
Group: Default
Requires: python3-core
Provides: pypi(test-generator)

%description python3
python3 components for the test-generator package.


%prep
%setup -q -n test-generator-0.1.2
cd %{_builddir}/test-generator-0.1.2

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1582912011
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export CFLAGS="$CFLAGS -fno-lto "
export FCFLAGS="$CFLAGS -fno-lto "
export FFLAGS="$CFLAGS -fno-lto "
export CXXFLAGS="$CXXFLAGS -fno-lto "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%check
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
PYTHONPATH=%{buildroot}$(python -c "import sys; print(sys.path[-1])") python setup.py test
%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/test-generator
cp %{_builddir}/test-generator-0.1.2/LICENSE %{buildroot}/usr/share/package-licenses/test-generator/75a3c6d489d6c7addb504840691981a8f5314442
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----

%files
%defattr(-,root,root,-)

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/test-generator/75a3c6d489d6c7addb504840691981a8f5314442

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
